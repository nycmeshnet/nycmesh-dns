name: Deploy DNS Server

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

permissions: read-all

env:
  # Secrets
  TF_VAR_proxmox_host: ${{ secrets.TF_VAR_PROXMOX_HOST }}
  TF_VAR_proxmox_token_id: ${{ secrets.TF_VAR_PROXMOX_TOKEN_ID }}
  TF_VAR_proxmox_token_secret: ${{ secrets.TF_VAR_PROXMOX_TOKEN_SECRET }}
  TF_VAR_mesh_dns_local_password: ${{ secrets.TF_VAR_MESH_DNS_LOCAL_PASSWORD }}
  TF_VAR_influx_db_token: ${{ secrets.TF_VAR_INFLUX_DB_TOKEN }}
  TF_VAR_datadog_api_key: ${{ secrets.TF_VAR_DATADOG_API_KEY }}
  TF_VAR_dns_cookie_secret: "${{ secrets.TF_VAR_DNS_COOKIE_SECRET }}"
  TF_VAR_tsig_key_k8s_prod1: "${{ secrets.TF_VAR_TSIG_KEY_K8S_PROD1 }}"
  TF_VAR_tsig_key_k8s_prod2: "${{ secrets.TF_VAR_TSIG_KEY_K8S_PROD2 }}"
  TF_VAR_tsig_key_k8s_dev3: "${{ secrets.TF_VAR_TSIG_KEY_K8S_DEV3 }}"
  TF_VAR_tsig_key_ha: "${{ secrets.TF_VAR_TSIG_KEY_HOMEASSISTANT }}"
  TF_VAR_tsig_key_jon: "${{ secrets.TF_VAR_TSIG_KEY_JON }}"
  TF_VAR_tsig_key_10_r630_01: "${{ secrets.TF_VAR_TSIG_KEY_10_R630_01 }}"
  TF_VAR_tsig_key_713_r640_01: "${{ secrets.TF_VAR_TSIG_KEY_713_R640_01 }}"
  TF_VAR_tsig_key_doh: "${{ secrets.TF_VAR_TSIG_KEY_DOH }}"
  TF_VAR_tsig_key_nn: "${{ secrets.TF_VAR_TSIG_KEY_NN }}"
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # @v4
      
      - uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d #@v5
        with:
          python-version: '3.11'
      
      - name: Setup ansible
        run: pip install --require-hashes -r requirements.txt && export PATH="$HOME/.local/bin:$PATH" && ansible-galaxy collection install --force -r infra/ansible/roles/requirements.yml

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@651471c36a6092792c552e8b1bef71e592b462d8 # @v3
        with:
          terraform_version: 1.8.3

      - name: Setup WireGuard
        run:  |
          sudo apt-get update && sudo apt-get install -y wireguard
          echo "${{ secrets.WIREGUARD_PRIVATE_KEY }}" > privatekey
          sudo ip link add dev wg0 type wireguard
          sudo ip address add dev wg0 ${{ secrets.WIREGUARD_OVERLAY_NETWORK_IP }} peer ${{ secrets.WIREGUARD_PEER }}
          sudo wg set wg0 listen-port 48123 private-key privatekey peer ${{ secrets.WIREGUARD_PEER_PUBLIC_KEY }} allowed-ips 0.0.0.0/0 endpoint ${{ secrets.WIREGUARD_ENDPOINT }}
          sudo ip link set up dev wg0
          rm privatekey

      - name: Setup backend
        run: |
          echo "bucket = \"$BUCKET_TF_STATE\"" > backend.tfvars
          echo "key    = \"terraform/state/dns-${{ inputs.environment }}.tfstate\"" >> backend.tfvars
        working-directory: ./infra/terraform/

      - name: Terraform init
        id: init
        run: terraform init -backend-config=backend.tfvars
        working-directory: ./infra/terraform/
    
      - name: Terraform validate
        run: terraform validate
        working-directory: ./infra/terraform/
      
      - name: Terraform Apply
        run: |
          echo "${{ secrets.TF_VAR_MESH_DNS_SSH_KEY }}" > dns_ed25519
          echo "${{ secrets.TF_VAR_MESH_DNS_PUB_KEY }}" > dns_ed25519.pub
          chmod 600 dns_ed25519
          chmod 600 dns_ed25519.pub
          terraform apply -auto-approve -input=false -var-file=${{ inputs.environment }}.tfvars
        working-directory: ./infra/terraform/
      
      - name: Run playbook
        run: sleep 45 && export PATH="$HOME/.local/bin:$PATH" && ansible-playbook -i inventory.yaml dns_server.yaml
        working-directory: ./infra/ansible/
